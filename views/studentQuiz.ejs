<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>IF-AT Quiz</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <style>
    body {
      background: #f8f9fa;
      margin: 0;
      padding: 0;
    }
    .container {
      margin-top: 30px;
    }
    /* Disable interactions if group name is empty */
    .disabled-overlay {
      pointer-events: none;
      opacity: 0.6;
    }
    /* Make question # column narrower */
    th.question-num {
      width: 50px;
      text-align: center;
    }
    /* Use smaller table spacing */
    table.table-sm th,
    table.table-sm td {
      padding: 0.4rem;
    }
    /* Base cell styling */
    .answerCell {
      border: 1px solid #ccc;
      width: 60px;
      height: 60px;
      text-align: center;
      cursor: pointer;
      position: relative;
      transition: background-color 0.2s ease;
    }
    /* When clicked but incorrect */
    .answerCell.revealed.wrong {
      background-color: #ffe5e5; /* light pink */
      border-color: #f5c6cb;
    }
    /* Correct cell => gold star */
    .answerCell.correct::after {
      content: 'â˜…';
      position: absolute;
      font-size: 24px;
      color: gold;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
    /* Once a question is answered, we lock that row */
    .locked {
      pointer-events: none;
      opacity: 0.85;
    }
    /* Points column styling */
    .pointsCell {
      width: 60px;
      text-align: center;
      font-weight: bold;
      border: 1px solid #ccc;
      background: #fafafa;
    }
    tfoot {
      background: #f2f2f2;
      font-weight: bold;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1><%= quizTitle %></h1>
    <p><strong>Class Code:</strong> <%= code %></p>

    <!-- Group name field -->
    <div class="mb-3">
      <label class="form-label">Group Name:</label>
      <input type="text" id="groupName" class="form-control" placeholder="Enter your group name" />
      <small class="text-muted">You must enter your group name before answering.</small>
    </div>

    <!-- The quiz table is disabled until group name is entered -->
    <div id="quizContainer" class="disabled-overlay">
      <table class="table table-sm" id="quizTable">
        <thead>
          <tr>
            <th class="question-num">#</th>
            <% let letters = ['A','B','C','D','E']; %>
            <% for(let i=0; i<optionCount; i++){ %>
              <th><%= letters[i] %></th>
            <% } %>
            <th>Points</th>
          </tr>
        </thead>
        <tbody id="quizBody"></tbody>
        <tfoot>
          <tr>
            <th colspan="<%= optionCount + 1 %>">Total</th>
            <td id="totalPoints" class="pointsCell">0</td>
          </tr>
        </tfoot>
      </table>

      <button id="finishBtn" class="btn btn-success">Finish</button>
    </div>
  </div>

  <script>
    const code = "<%= code %>";
    const totalQuestions = <%= questionCount %>;
    const optionCount = <%= optionCount %>;
    const correctAnswers = <%- JSON.stringify(correctAnswers) %>;

    // We'll track:
    // 1) picks[i] = array of letters in the order clicked for question i
    // 2) answered[i] = boolean if question was answered (correct found)
    // 3) attempts[i] = how many clicks so far on question i (to compute score)
    // 4) rowScores[i] = final points for question i
    const picks = Array.from({length: totalQuestions}, () => []);
    const answered = Array(totalQuestions).fill(false);
    const attempts = Array(totalQuestions).fill(0);
    const rowScores = Array(totalQuestions).fill(0);

    // Scoring: 1st correct => 5 pts, 2nd => 4, etc.
    // If they guess more times than the length, we give 0 or keep it at 1 if we want
    const scoring = [5, 3, 2, 1, 0];

    const groupNameInput = document.getElementById('groupName');
    const quizContainer = document.getElementById('quizContainer');
    const quizBody = document.getElementById('quizBody');
    const finishBtn = document.getElementById('finishBtn');
    const totalPointsCell = document.getElementById('totalPoints');

    // letters = ['A','B','C','D','E'] from EJS
    const letters = ['A','B','C','D','E'];

    // 1) enable quiz once group name is entered
    groupNameInput.addEventListener('input', () => {
      if (groupNameInput.value.trim() !== "") {
        quizContainer.classList.remove('disabled-overlay');
      } else {
        quizContainer.classList.add('disabled-overlay');
      }
    });

    // 2) Build quiz table
    for (let i = 0; i < totalQuestions; i++) {
      const row = document.createElement('tr');
      row.dataset.questionIndex = i;

      // Question #
      const th = document.createElement('th');
      th.textContent = i + 1;
      th.classList.add('question-num');
      row.appendChild(th);

      // Answer cells
      for (let j = 0; j < optionCount; j++) {
        const cell = document.createElement('td');
        cell.classList.add('answerCell');
        cell.dataset.letter = letters[j];
        cell.dataset.question = i;

        cell.addEventListener('click', function() {
          const qIndex = parseInt(this.dataset.question, 10);
          if (answered[qIndex]) return; // row locked, ignore

          // record the pick
          picks[qIndex].push(this.dataset.letter);
          attempts[qIndex]++;

          // check correctness
          if (this.dataset.letter === correctAnswers[qIndex]) {
            this.classList.add('revealed', 'correct');
            answered[qIndex] = true;
            // finalize the score for question i
            const attemptNum = attempts[qIndex]; // how many guesses so far
            const baseScore = scoring[attemptNum - 1] || 0; 
            rowScores[qIndex] = baseScore;
            // lock the row
            row.classList.add('locked');
          } else {
            // mark cell as wrong
            this.classList.add('revealed', 'wrong');
          }

          // update row score cell
          updateRowScore(row, qIndex);
          // update total
          updateTotal();
        });

        row.appendChild(cell);
      }

      // Points cell (for row i)
      const pointsTd = document.createElement('td');
      pointsTd.classList.add('pointsCell');
      pointsTd.textContent = "0"; // initial
      row.appendChild(pointsTd);

      quizBody.appendChild(row);
    }

    function updateRowScore(row, qIndex) {
      // last cell is the pointsCell
      const pointsCell = row.querySelector('.pointsCell');
      pointsCell.textContent = rowScores[qIndex];
    }

    function updateTotal() {
      let sum = 0;
      for (let s of rowScores) {
        sum += s;
      }
      totalPointsCell.textContent = sum;
    }

    // 3) Finish => submit picks
    finishBtn.addEventListener('click', async () => {
      const groupName = groupNameInput.value.trim();
      if (!groupName) {
        alert("Please enter your group name first.");
        return;
      }

      // Show final score in an alert, for example
      const finalScore = rowScores.reduce((a,b) => a+b, 0);

      try {
        // POST picks to server
        const resp = await fetch('/submitResults', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            code,
            groupName,
            picks: JSON.stringify(picks)
          })
        });
        const data = await resp.json();
        if (data.success) {
          alert(`Your final score is ${finalScore}. Results submitted successfully!`);
        } else {
          alert("Error submitting: " + (data.error || "Unknown"));
        }
      } catch(e) {
        alert("Error submitting: " + e);
      }
    });
  </script>
</body>
</html>
